package lesson8;

// 공개될 필요(얼만큼 보여주냐)가 없다면 가시성을 낮출것 - 간섭받을 가능성이 줄어듦!!
// 항상 보수적으로 만듦. 필요하면 보여줌 -- 변수의 원칙도 마찬가지. 일단 final!.
// 그러나 메서드나 클래스에는 반대! final을 걸면 상속이나 오버라이드가 안 됨.
// 메서드나 클래스는 상속이나 오버라이드의 가능성을 열어둚 - 점진적인 확장 구현을 생각함!(디커플링-인터페이스 혹은 추상 클래스)
// 택배기사 ----------------사이트 --------------------여러분(112)
//      X27 <---------------                 (디커플링)
//      X27 ----------------> 교환소 --(임플리먼트)--> 여러분(115) (변경되어도 상관 없음)
class Owner {

}
